import { env } from '@//lib/constants';
import emojiStrip from 'emoji-strip';
import type { recipeInfo, recipeResult } from './types';

export async function postRecipe(recipe: recipeInfo) {
  let prompt =
    process.env.USER_PROMPT ||
    'You will receive a transcription of a video generated by Whisper AI. This transcription may include timestampsâ€”please ignore them, as they are not needed for the Mealie recipe.\n' +
      '\n' +
      'You will also receive:\n' +
      '- The video thumbnail from a social network, which should be used as the recipe cover.\n' +
      '- A post description from the same social network, which may contain additional ingredient information.\n' +
      '- The original post itself, which must be saved.\n' +
      '\n' +
      'Important:\n' +
      '- Do **not** translate the recipe unless explicitly instructed.\n' +
      '- Always keep the recipe in its **original language**.\n' +
      '\n' +
      'Your task is to process this content accordingly.';
  console.log(prompt);
  prompt += `<transcription> ${recipe.transcription}</transcription> <thumbnail> ${recipe.thumbnail}</thumbnail> <description> ${recipe.description}</description><postURL>${recipe.postURL}</postURL>`;
  const data = emojiStrip(prompt);
  try {
    const res = await fetch(`${env.MEALIE_URL}/api/recipes/create/html-or-json`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${env.MEALIE_API_KEY}`,
      },
      body: JSON.stringify({
        data: data,
      }),
      signal: AbortSignal.timeout(30000),
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error(`${res.status} ${res.statusText} - ${errorText} - ${recipe.transcription} - ${recipe.description}`);
      throw new Error('Failed to create recipe');
    }
    const body = await res.json();
    console.log('Recipe response:', body);
    return body;
  } catch (error: any) {
    if (error.name === 'AbortError') {
      console.error('Timeout creating mealie recipe. Report this issue on Mealie GitHub.');
      throw new Error(
        `Timeout creating mealie recipe. Report this issue on Mealie GitHub. Input URL: ${env.MEALIE_URL}`,
      );
    }
    console.error('Error in postRecipe:', error);
    throw new Error(error.message);
  }
}

export async function getRecipe(recipeSlug: string): Promise<recipeResult> {
  const res = await fetch(`${env.MEALIE_URL}/api/recipes/${recipeSlug}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${env.MEALIE_API_KEY}`,
    },
  });

  const body = await res.json();
  if (!res.ok) throw new Error('Failed to get recipe');

  return {
    name: body.name,
    description: body.description,
    imageUrl: `${env.MEALIE_URL}/api/media/recipes/${body.id}/images/original.webp`,
    url: `${env.MEALIE_URL}/g/home/r/${recipeSlug}`,
  };
}
